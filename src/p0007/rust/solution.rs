// 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
// 
// 如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。
// 
// 假设环境不允许存储 64 位整数（有符号或无符号）。
//  
// 
// 示例 1：
// 
// 输入：x = 123
// 输出：321
// 示例 2：
// 
// 输入：x = -123
// 输出：-321
// 示例 3：
// 
// 输入：x = 120
// 输出：21
// 示例 4：
// 
// 输入：x = 0
// 输出：0
//  
// 
// 提示：
// 
// -231 <= x <= 231 - 1

impl Solution {
    pub fn reverse(x: i32) -> i32 {
        let mut y = x;
        let mut ret: i64 = 0;
        while y != 0 {
            ret = 10 * ret + (y as i64) % 10;
            y /= 10;
        }
        if ret < (i32::MIN as i64) || ret > (i32::MAX as i64) {
            return 0;
        }

        ret as i32
    }
}
